#!/usr/bin/env python3

# pylint:disable=invalid-name

"""Parse the git URL and extract informations."""

import re
from urllib.parse import urlparse
from argparse import ArgumentParser, RawDescriptionHelpFormatter

NETLOC_RE = re.compile(r'((?P<user>(\w*))@)?(?P<host>([\w\:\.]*))$')


def project_path(url):
    """Extract the project path from the URL."""
    path = url.path

    if path.startswith('/'):
        path = path[len('/'):]

    if path.endswith('.git'):
        path = path[:-len('.git')]

    print(path)


def server_url(url):
    """Extract the server URL the repository ath from the URL."""
    match = NETLOC_RE.match(url.netloc)

    if not match:
        print('')
    else:
        print(match.group('host'))


ACTIONS = {
    'project_path': project_path,
    'server_url': server_url,
}


def _main():
    parser = ArgumentParser(formatter_class=RawDescriptionHelpFormatter,
                            description=__doc__)

    parser.add_argument(dest='action', choices=ACTIONS.keys())

    parser.add_argument(dest='git_url')

    parsed = parser.parse_args()

    ACTIONS[parsed.action](urlparse(parsed.git_url))


if __name__ == '__main__':
    _main()
